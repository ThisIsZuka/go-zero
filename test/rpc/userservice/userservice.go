// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"test.com/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetAllUserRequest   = user.GetAllUserRequest
	GetAllUsersResponse = user.GetAllUsersResponse
	GetUserByIdRequest  = user.GetUserByIdRequest
	GetUserByIdResponse = user.GetUserByIdResponse
	Request             = user.Request
	Response            = user.Response
	User                = user.User

	UserService interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
		GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUserService) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUserService) GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetAllUsers(ctx, in, opts...)
}
